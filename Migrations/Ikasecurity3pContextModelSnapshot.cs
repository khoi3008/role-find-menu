// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RoleBasedAuthorization.list;

#nullable disable

namespace RoleBasedAuthorization.Migrations
{
    [DbContext(typeof(Ikasecurity3pContext))]
    partial class Ikasecurity3pContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RoleBasedAuthorization.list.TblAppInfo", b =>
                {
                    b.Property<string>("CodeProject")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("EnforceUpdate")
                        .HasColumnType("bit");

                    b.Property<string>("FileId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("FileID");

                    b.Property<bool>("IsSetup")
                        .HasColumnType("bit")
                        .HasColumnName("isSetup");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ServerPath")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("CodeProject");

                    b.ToTable("tbl_AppInfo", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblButtonLang", b =>
                {
                    b.Property<string>("Button")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Lang")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Content")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Button", "Lang");

                    b.ToTable("tbl_ButtonLang", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblControlDefaultLabel", b =>
                {
                    b.Property<string>("FunctionName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ControlName")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Lang")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("ControlType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("PropCaption")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PropHint")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PropParent")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("FunctionName", "ControlName", "Lang");

                    b.ToTable("tbl_ControlDefaultLabel", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblControlLabel", b =>
                {
                    b.Property<string>("FunctionName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Lang")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<byte[]>("ControlLabel")
                        .HasColumnType("image");

                    b.HasKey("FunctionName", "Lang");

                    b.ToTable("tbl_ControlLabel", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblControlProfile", b =>
                {
                    b.Property<string>("ProfileName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UserName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<byte[]>("Content")
                        .HasColumnType("image");

                    b.Property<string>("ControlName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ControlType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FunctionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("LastDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ProfileName", "UserName");

                    b.HasIndex("FunctionName");

                    b.HasIndex("UserName");

                    b.ToTable("tbl_ControlProfile", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblDefault", b =>
                {
                    b.Property<string>("CName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("cName");

                    b.Property<string>("CValue")
                        .HasColumnType("text")
                        .HasColumnName("cValue");

                    b.HasKey("CName");

                    b.ToTable("tbl_default", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblFormControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ControlType")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("DefaultValue")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FunctionName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LayoutName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("PropAnchor")
                        .HasColumnType("int");

                    b.Property<int>("PropBackColor")
                        .HasColumnType("int");

                    b.Property<int>("PropDoc")
                        .HasColumnType("int");

                    b.Property<short?>("PropEnable")
                        .HasColumnType("smallint");

                    b.Property<short>("PropFontGdiCharSet")
                        .HasColumnType("smallint");

                    b.Property<string>("PropFontName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<double>("PropFontSize")
                        .HasColumnType("float");

                    b.Property<short>("PropFontStrikeout")
                        .HasColumnType("smallint");

                    b.Property<short>("PropFontStyle")
                        .HasColumnType("smallint");

                    b.Property<short>("PropFontUnderline")
                        .HasColumnType("smallint");

                    b.Property<int>("PropForeColor")
                        .HasColumnType("int");

                    b.Property<int>("PropHeigh")
                        .HasColumnType("int");

                    b.Property<short>("PropIsKnownBackColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1);

                    b.Property<short>("PropIsKnownForeColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1);

                    b.Property<string>("PropLabel")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PropLeft")
                        .HasColumnType("int");

                    b.Property<string>("PropName")
                        .IsRequired()
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)");

                    b.Property<string>("PropParent")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)");

                    b.Property<string>("PropStyleController")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<int>("PropTabIndex")
                        .HasColumnType("int");

                    b.Property<int>("PropTop")
                        .HasColumnType("int");

                    b.Property<short?>("PropVisible")
                        .HasColumnType("smallint");

                    b.Property<int>("PropWidth")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LayoutName");

                    b.ToTable("tbl_FormControls", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblFunction", b =>
                {
                    b.Property<string>("FunctionName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CodeProject")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("FormName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FunctionDesc")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("-");

                    b.Property<string>("FunctionType")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<string>("Owner")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("FunctionName")
                        .HasName("PK_SS_Function");

                    b.ToTable("tbl_Function", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblFunctionDatum", b =>
                {
                    b.Property<string>("FunctionName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ObjectName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Del")
                        .HasColumnType("int");

                    b.Property<int>("Exc")
                        .HasColumnType("int");

                    b.Property<int>("Ins")
                        .HasColumnType("int");

                    b.Property<string>("ObjectType")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<int>("Sel")
                        .HasColumnType("int");

                    b.Property<int>("Upd")
                        .HasColumnType("int");

                    b.HasKey("FunctionName", "ObjectName");

                    b.ToTable("tbl_function_data", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblFunctionDetail", b =>
                {
                    b.Property<string>("PermissionType")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.HasKey("PermissionType");

                    b.ToTable("tbl_FunctionDetail", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblFunctionPermission", b =>
                {
                    b.Property<string>("UserName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("FunctionName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit")
                        .HasColumnName("isAdmin");

                    b.Property<string>("PermissionType")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.HasKey("UserName", "FunctionName");

                    b.HasIndex("FunctionName");

                    b.ToTable("tbl_FunctionPermission", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblFunctionType", b =>
                {
                    b.Property<string>("Type")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Type");

                    b.ToTable("tbl_FunctionType", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblInfo", b =>
                {
                    b.Property<string>("IName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("iName");

                    b.Property<string>("IComment")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("iComment");

                    b.Property<string>("IValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("iValue");

                    b.HasKey("IName")
                        .HasName("PK_Info");

                    b.ToTable("tbl_Info", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblInfo1", b =>
                {
                    b.Property<string>("IComment")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("iComment");

                    b.Property<string>("IName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("iName");

                    b.Property<string>("IValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("iValue");

                    b.ToTable("tbl_Info1", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblLanguage", b =>
                {
                    b.Property<string>("LangEng")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Lang_eng");

                    b.Property<string>("Lang")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("LangEng");

                    b.ToTable("tbl_Language", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblLayout", b =>
                {
                    b.Property<string>("LayoutName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("CodeLayout")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte[]>("FormImage")
                        .HasColumnType("image");

                    b.Property<string>("FunctionName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<byte[]>("LayoutContent")
                        .HasColumnType("image");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasDefaultValue("INNOSOFT");

                    b.Property<string>("Version")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("char(7)")
                        .IsFixedLength();

                    b.HasKey("LayoutName");

                    b.HasIndex("FunctionName");

                    b.ToTable("tbl_Layout", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblLayoutDefault", b =>
                {
                    b.Property<string>("UserName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("FunctionName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LayoutName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("UserName", "FunctionName");

                    b.HasIndex("LayoutName");

                    b.ToTable("tbl_LayoutDefault", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblLayoutPermission", b =>
                {
                    b.Property<string>("UserName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("LayoutName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit")
                        .HasColumnName("isDefault");

                    b.HasKey("UserName", "LayoutName");

                    b.HasIndex("LayoutName");

                    b.ToTable("tbl_LayoutPermission", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblLicenceRegisted", b =>
                {
                    b.Property<string>("MacAddress")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Project")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DefaultBranch")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsCheckDate")
                        .HasColumnType("bit")
                        .HasColumnName("isCheckDate");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime");

                    b.HasKey("MacAddress", "Project");

                    b.ToTable("tbl_LicenceRegisted", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblLoginLog", b =>
                {
                    b.Property<string>("ComputerName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("LoginDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MacAddress")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Project")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.ToTable("tbl_LoginLog", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FunctionName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NameEng")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Name_Eng");

                    b.Property<int>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("Parent_ID");

                    b.Property<string>("Url")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("(NULL)");

                    b.HasKey("Id");

                    b.ToTable("tbl_Menu", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblMenuRole", b =>
                {
                    b.Property<string>("RoleName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("MenuId")
                        .HasColumnType("int")
                        .HasColumnName("MenuID");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("RoleName", "MenuId");

                    b.HasIndex("MenuId");

                    b.ToTable("tbl_Menu_Role", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblMessage", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MsAction")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("MsButton")
                        .HasColumnType("int");

                    b.Property<int>("MsButtonDefault")
                        .HasColumnType("int");

                    b.Property<string>("MsCaption")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MsCause")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("MsIcon")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.ToTable("tbl_Message", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblMessageLang", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<string>("Lang")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Message")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MsAction")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MsCaption")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MsCause")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Code", "Lang")
                        .HasName("PK_tbl_MassageLang");

                    b.ToTable("tbl_MessageLang", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblPermissionDatabase", b =>
                {
                    b.Property<string>("Pdatabase")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("PDatabase");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasIndex("PermissionName");

                    b.ToTable("tbl_PermissionDatabase", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblPermissionType", b =>
                {
                    b.Property<int>("Pos")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<string>("PropCaption")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PropName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("UseType")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Pos");

                    b.ToTable("tbl_PermissionType", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblProject", b =>
                {
                    b.Property<string>("CodeProject")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("DatabaseName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ServerName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("CodeProject");

                    b.ToTable("tbl_project", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblProjectInfo", b =>
                {
                    b.Property<string>("Codeproject")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("codeproject");

                    b.Property<byte[]>("Data")
                        .HasMaxLength(8000)
                        .HasColumnType("varbinary(8000)")
                        .HasColumnName("data");

                    b.Property<string>("Project")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("project");

                    b.Property<int?>("UseThisInfo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Codeproject");

                    b.ToTable("tbl_project_info", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblReportPermission", b =>
                {
                    b.Property<string>("UserName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ReportName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("IsDefault")
                        .HasColumnType("int")
                        .HasColumnName("isDefault");

                    b.HasKey("UserName", "ReportName");

                    b.ToTable("tbl_ReportPermission", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblRole", b =>
                {
                    b.Property<string>("RoleName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("isActive");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("isSystem");

                    b.HasKey("RoleName");

                    b.ToTable("tbl_Role", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblRoleFunctionPermission", b =>
                {
                    b.Property<string>("RoleName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("FunctionName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit")
                        .HasColumnName("isAdmin");

                    b.Property<string>("PermissionType")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.HasKey("RoleName", "FunctionName");

                    b.HasIndex("FunctionName");

                    b.ToTable("tbl_RoleFunctionPermission", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblRoleLayoutPermission", b =>
                {
                    b.Property<string>("RoleName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("LayoutName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit")
                        .HasColumnName("isDefault");

                    b.HasKey("RoleName", "LayoutName");

                    b.HasIndex("LayoutName");

                    b.ToTable("tbl_RoleLayoutPermission", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblRoleReportPermission", b =>
                {
                    b.Property<string>("RoleName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ReportName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RoleName", "ReportName");

                    b.ToTable("tbl_RoleReportPermission", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblRoleSystemPermission", b =>
                {
                    b.Property<string>("RoleName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("PermissionName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit")
                        .HasColumnName("isAdmin");

                    b.HasKey("RoleName", "PermissionName");

                    b.HasIndex("PermissionName");

                    b.ToTable("tbl_RoleSystemPermission", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblSystemPermission", b =>
                {
                    b.Property<string>("PermissionName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Comment")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("comment");

                    b.HasKey("PermissionName");

                    b.ToTable("tbl_SystemPermission", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblText", b =>
                {
                    b.Property<string>("Dectext")
                        .HasColumnType("text")
                        .HasColumnName("dectext");

                    b.Property<string>("Enctext")
                        .HasColumnType("text")
                        .HasColumnName("enctext");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.ToTable("tbl_text", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblUpdateFile", b =>
                {
                    b.Property<string>("FileId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("FileID");

                    b.Property<byte[]>("FileContent")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("IsRarfile")
                        .HasColumnType("bit")
                        .HasColumnName("IsRARfile");

                    b.Property<DateTime?>("PublishDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("UploadDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("FileId");

                    b.ToTable("tbl_UpdateFile", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblUserAccount", b =>
                {
                    b.Property<string>("UserName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("isActive");

                    b.Property<string>("LayoutDefault")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<byte[]>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("varbinary(255)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(88)
                        .IsUnicode(false)
                        .HasColumnType("char(88)")
                        .IsFixedLength();

                    b.Property<string>("PasswordSalt")
                        .HasMaxLength(172)
                        .IsUnicode(false)
                        .HasColumnType("char(172)")
                        .IsFixedLength();

                    b.Property<byte[]>("Signature")
                        .HasColumnType("image");

                    b.Property<string>("ToolBarDefault")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("UserName")
                        .HasName("PK_SS_UserAccount");

                    b.ToTable("tbl_UserAccount", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblUserDefaultValue", b =>
                {
                    b.Property<string>("UserName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PropName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Project")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("system");

                    b.Property<string>("PropValue")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("UserName", "PropName", "Project");

                    b.ToTable("tbl_UserDefaultValue", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblUserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserRoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleId"));

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit")
                        .HasColumnName("isAdmin");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("UserRoleId");

                    b.HasIndex("RoleName");

                    b.HasIndex("UserName");

                    b.ToTable("tbl_UserRole", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblUserSystemPermission", b =>
                {
                    b.Property<string>("UserName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PermissionName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit")
                        .HasColumnName("isAdmin");

                    b.HasKey("UserName", "PermissionName");

                    b.HasIndex("PermissionName");

                    b.ToTable("tbl_UserSystemPermission", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblUserTool", b =>
                {
                    b.Property<string>("ToolName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<byte[]>("ToolBar")
                        .HasColumnType("image");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("ToolName");

                    b.ToTable("tbl_UserTool", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.VwControlLabel", b =>
                {
                    b.Property<string>("FormName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FunctionDesc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FunctionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Lang")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.ToTable((string)null);

                    b.ToView("vw_ControlLabel", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.VwFormControlDefaultLabel", b =>
                {
                    b.Property<string>("CodeProject")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FormName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FunctionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.ToTable((string)null);

                    b.ToView("vw_FormControlDefaultLabel", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.VwLayoutDefault", b =>
                {
                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime");

                    b.Property<string>("FunctionName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LayoutName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Version")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("char(7)")
                        .IsFixedLength();

                    b.ToTable((string)null);

                    b.ToView("vw_LayoutDefault", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.VwLayoutPrj", b =>
                {
                    b.Property<string>("CodeProject")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("FormImage")
                        .HasColumnType("image");

                    b.Property<string>("FunctionDesc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FunctionName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("LayoutContent")
                        .HasColumnType("image");

                    b.Property<string>("LayoutName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Version")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("char(7)")
                        .IsFixedLength();

                    b.ToTable((string)null);

                    b.ToView("vw_Layout_Prj", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.VwLayoutUser", b =>
                {
                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("FormImage")
                        .HasColumnType("image");

                    b.Property<string>("FunctionName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<byte[]>("LayoutContent")
                        .HasColumnType("image");

                    b.Property<string>("LayoutName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Version")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("char(7)")
                        .IsFixedLength();

                    b.ToTable((string)null);

                    b.ToView("vw_LayoutUser", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.VwMessageLang", b =>
                {
                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("char(9)")
                        .IsFixedLength();

                    b.Property<string>("Lang")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Message")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MsAction")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("MsButton")
                        .HasColumnType("int");

                    b.Property<int>("MsButtonDefault")
                        .HasColumnType("int");

                    b.Property<string>("MsCaption")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MsCause")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("MsIcon")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("vw_MessageLang", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.VwRole2role", b =>
                {
                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("isSystem");

                    b.Property<string>("ProleName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("PRoleName");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.ToTable((string)null);

                    b.ToView("vw_role2role", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.VwUserLayout", b =>
                {
                    b.Property<string>("LayoutName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.ToTable((string)null);

                    b.ToView("vw_UserLayout", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.VwUserRole", b =>
                {
                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("isSystem");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.ToTable((string)null);

                    b.ToView("vw_UserRole", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.VwUserRoleLayout", b =>
                {
                    b.Property<string>("LayoutName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.ToTable((string)null);

                    b.ToView("vw_UserRoleLayout", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.VwUserRoleSystem", b =>
                {
                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.ToTable((string)null);

                    b.ToView("vw_UserRoleSystem", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.VwUserSystem", b =>
                {
                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.ToTable((string)null);

                    b.ToView("vw_UserSystem", (string)null);
                });

            modelBuilder.Entity("TblRole2Role", b =>
                {
                    b.Property<string>("RoleName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("UseRole")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("RoleName", "UseRole")
                        .HasName("PK_Role2Role");

                    b.HasIndex("UseRole");

                    b.ToTable("tbl_Role2Role", (string)null);
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblControlProfile", b =>
                {
                    b.HasOne("RoleBasedAuthorization.list.TblFunction", "FunctionNameNavigation")
                        .WithMany("TblControlProfiles")
                        .HasForeignKey("FunctionName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_ControlProfile_tbl_Function");

                    b.HasOne("RoleBasedAuthorization.list.TblUserAccount", "UserNameNavigation")
                        .WithMany("TblControlProfiles")
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_ControlProfile_tbl_UserAccount");

                    b.Navigation("FunctionNameNavigation");

                    b.Navigation("UserNameNavigation");
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblFormControl", b =>
                {
                    b.HasOne("RoleBasedAuthorization.list.TblLayout", "LayoutNameNavigation")
                        .WithMany("TblFormControls")
                        .HasForeignKey("LayoutName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_FormControls_tbl_Layout");

                    b.Navigation("LayoutNameNavigation");
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblFunctionPermission", b =>
                {
                    b.HasOne("RoleBasedAuthorization.list.TblFunction", "FunctionNameNavigation")
                        .WithMany("TblFunctionPermissions")
                        .HasForeignKey("FunctionName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_FunctionPermission_tbl_Function");

                    b.Navigation("FunctionNameNavigation");
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblLayout", b =>
                {
                    b.HasOne("RoleBasedAuthorization.list.TblFunction", "FunctionNameNavigation")
                        .WithMany("TblLayouts")
                        .HasForeignKey("FunctionName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_tbl_Layout_tbl_Function");

                    b.Navigation("FunctionNameNavigation");
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblLayoutDefault", b =>
                {
                    b.HasOne("RoleBasedAuthorization.list.TblLayout", "LayoutNameNavigation")
                        .WithMany("TblLayoutDefaults")
                        .HasForeignKey("LayoutName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_LayoutDefault_tbl_Layout");

                    b.HasOne("RoleBasedAuthorization.list.TblUserAccount", "UserNameNavigation")
                        .WithMany("TblLayoutDefaults")
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_LayoutDefault_tbl_UserAccount");

                    b.Navigation("LayoutNameNavigation");

                    b.Navigation("UserNameNavigation");
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblLayoutPermission", b =>
                {
                    b.HasOne("RoleBasedAuthorization.list.TblLayout", "LayoutNameNavigation")
                        .WithMany("TblLayoutPermissions")
                        .HasForeignKey("LayoutName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_LayoutPermission_tbl_Layout");

                    b.HasOne("RoleBasedAuthorization.list.TblUserAccount", "UserNameNavigation")
                        .WithMany("TblLayoutPermissions")
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_LayoutPermission_tbl_UserAccount");

                    b.Navigation("LayoutNameNavigation");

                    b.Navigation("UserNameNavigation");
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblMenuRole", b =>
                {
                    b.HasOne("RoleBasedAuthorization.list.TblMenu", "Menu")
                        .WithMany("TblMenuRoles")
                        .HasForeignKey("MenuId")
                        .IsRequired()
                        .HasConstraintName("FK_tbl_Menu_Role_tbl_Menu");

                    b.HasOne("RoleBasedAuthorization.list.TblRole", "RoleNameNavigation")
                        .WithMany("TblMenuRoles")
                        .HasForeignKey("RoleName")
                        .IsRequired()
                        .HasConstraintName("FK_tbl_Menu_Role_tbl_Role");

                    b.Navigation("Menu");

                    b.Navigation("RoleNameNavigation");
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblMessageLang", b =>
                {
                    b.HasOne("RoleBasedAuthorization.list.TblMessage", "CodeNavigation")
                        .WithMany("TblMessageLangs")
                        .HasForeignKey("Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_MassageLang_tbl_Message");

                    b.Navigation("CodeNavigation");
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblPermissionDatabase", b =>
                {
                    b.HasOne("RoleBasedAuthorization.list.TblSystemPermission", "PermissionNameNavigation")
                        .WithMany()
                        .HasForeignKey("PermissionName")
                        .IsRequired()
                        .HasConstraintName("FK_tbl_PermissionDatabase_tbl_SystemPermission");

                    b.Navigation("PermissionNameNavigation");
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblReportPermission", b =>
                {
                    b.HasOne("RoleBasedAuthorization.list.TblUserAccount", "UserNameNavigation")
                        .WithMany("TblReportPermissions")
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_ReportPermission_tbl_UserAccount");

                    b.Navigation("UserNameNavigation");
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblRoleFunctionPermission", b =>
                {
                    b.HasOne("RoleBasedAuthorization.list.TblFunction", "FunctionNameNavigation")
                        .WithMany("TblRoleFunctionPermissions")
                        .HasForeignKey("FunctionName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_RoleFunctionPermission_tbl_Function");

                    b.HasOne("RoleBasedAuthorization.list.TblRole", "RoleNameNavigation")
                        .WithMany("TblRoleFunctionPermissions")
                        .HasForeignKey("RoleName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_RoleFunctionPermission_tbl_Role");

                    b.Navigation("FunctionNameNavigation");

                    b.Navigation("RoleNameNavigation");
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblRoleLayoutPermission", b =>
                {
                    b.HasOne("RoleBasedAuthorization.list.TblLayout", "LayoutNameNavigation")
                        .WithMany("TblRoleLayoutPermissions")
                        .HasForeignKey("LayoutName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_RoleLayoutPermission_tbl_Layout");

                    b.HasOne("RoleBasedAuthorization.list.TblRole", "RoleNameNavigation")
                        .WithMany("TblRoleLayoutPermissions")
                        .HasForeignKey("RoleName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_RoleLayoutPermission_tbl_Role");

                    b.Navigation("LayoutNameNavigation");

                    b.Navigation("RoleNameNavigation");
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblRoleReportPermission", b =>
                {
                    b.HasOne("RoleBasedAuthorization.list.TblRole", "RoleNameNavigation")
                        .WithMany("TblRoleReportPermissions")
                        .HasForeignKey("RoleName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_RoleReportPermission_tbl_Role");

                    b.Navigation("RoleNameNavigation");
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblRoleSystemPermission", b =>
                {
                    b.HasOne("RoleBasedAuthorization.list.TblSystemPermission", "PermissionNameNavigation")
                        .WithMany("TblRoleSystemPermissions")
                        .HasForeignKey("PermissionName")
                        .IsRequired()
                        .HasConstraintName("FK_tbl_RoleSystemPermission_tbl_SystemPermission");

                    b.HasOne("RoleBasedAuthorization.list.TblRole", "RoleNameNavigation")
                        .WithMany("TblRoleSystemPermissions")
                        .HasForeignKey("RoleName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_RoleSystemPermission_tbl_Role");

                    b.Navigation("PermissionNameNavigation");

                    b.Navigation("RoleNameNavigation");
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblUserRole", b =>
                {
                    b.HasOne("RoleBasedAuthorization.list.TblRole", "RoleNameNavigation")
                        .WithMany("TblUserRoles")
                        .HasForeignKey("RoleName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_UserRole_tbl_Role");

                    b.HasOne("RoleBasedAuthorization.list.TblUserAccount", "UserNameNavigation")
                        .WithMany("TblUserRoles")
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_UserRole_tbl_UserAccount");

                    b.Navigation("RoleNameNavigation");

                    b.Navigation("UserNameNavigation");
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblUserSystemPermission", b =>
                {
                    b.HasOne("RoleBasedAuthorization.list.TblSystemPermission", "PermissionNameNavigation")
                        .WithMany("TblUserSystemPermissions")
                        .HasForeignKey("PermissionName")
                        .IsRequired()
                        .HasConstraintName("FK_tbl_UserSystemPermission_tbl_SystemPermission");

                    b.HasOne("RoleBasedAuthorization.list.TblUserAccount", "UserNameNavigation")
                        .WithMany("TblUserSystemPermissions")
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_UserSystemPermission_tbl_UserAccount");

                    b.Navigation("PermissionNameNavigation");

                    b.Navigation("UserNameNavigation");
                });

            modelBuilder.Entity("TblRole2Role", b =>
                {
                    b.HasOne("RoleBasedAuthorization.list.TblRole", null)
                        .WithMany()
                        .HasForeignKey("RoleName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_Role2Role_tbl_Role");

                    b.HasOne("RoleBasedAuthorization.list.TblRole", null)
                        .WithMany()
                        .HasForeignKey("UseRole")
                        .IsRequired()
                        .HasConstraintName("FK_tbl_Role2Role_tbl_Role1");
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblFunction", b =>
                {
                    b.Navigation("TblControlProfiles");

                    b.Navigation("TblFunctionPermissions");

                    b.Navigation("TblLayouts");

                    b.Navigation("TblRoleFunctionPermissions");
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblLayout", b =>
                {
                    b.Navigation("TblFormControls");

                    b.Navigation("TblLayoutDefaults");

                    b.Navigation("TblLayoutPermissions");

                    b.Navigation("TblRoleLayoutPermissions");
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblMenu", b =>
                {
                    b.Navigation("TblMenuRoles");
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblMessage", b =>
                {
                    b.Navigation("TblMessageLangs");
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblRole", b =>
                {
                    b.Navigation("TblMenuRoles");

                    b.Navigation("TblRoleFunctionPermissions");

                    b.Navigation("TblRoleLayoutPermissions");

                    b.Navigation("TblRoleReportPermissions");

                    b.Navigation("TblRoleSystemPermissions");

                    b.Navigation("TblUserRoles");
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblSystemPermission", b =>
                {
                    b.Navigation("TblRoleSystemPermissions");

                    b.Navigation("TblUserSystemPermissions");
                });

            modelBuilder.Entity("RoleBasedAuthorization.list.TblUserAccount", b =>
                {
                    b.Navigation("TblControlProfiles");

                    b.Navigation("TblLayoutDefaults");

                    b.Navigation("TblLayoutPermissions");

                    b.Navigation("TblReportPermissions");

                    b.Navigation("TblUserRoles");

                    b.Navigation("TblUserSystemPermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
